#!/usr/bin/env python3
"""
Check Final Subscription Status
Verify that the centralized subscription manager completed the enable operation
"""

import boto3
import json
import time

def check_final_status():
    """Check the final status after SNS enable message"""
    
    print("=== CHECKING FINAL SUBSCRIPTION STATUS ===")
    
    lambda_client = boto3.client('lambda')
    function_name = "utility-customer-system-dev-subscription-manager"
    
    # Wait a bit more for the enable operation to complete
    print("Waiting 15 seconds for enable operations to complete...")
    time.sleep(15)
    
    try:
        response = lambda_client.invoke(
            FunctionName=function_name,
            InvocationType='RequestResponse',
            Payload=json.dumps({"action": "status"})
        )
        
        result = json.loads(response['Payload'].read())
        
        if response['StatusCode'] == 200:
            print("‚úÖ Status retrieval successful")
            
            status_data = json.loads(result['body'])['status']
            
            print(f"\nFinal Summary:")
            print(f"  Total functions: {status_data['summary']['total_functions']}")
            print(f"  Enabled functions: {status_data['summary']['enabled_functions']}")
            print(f"  Disabled functions: {status_data['summary']['disabled_functions']}")
            print(f"  Mixed state functions: {status_data['summary']['mixed_state_functions']}")
            
            print(f"\nDetailed Status:")
            for func in status_data['functions']:
                service_name = func['service_name']
                overall_status = func['overall_status']
                enabled_mappings = func.get('enabled_mappings', 0)
                total_mappings = func.get('total_mappings', 0)
                
                status_emoji = "‚úÖ" if overall_status == "enabled" else "‚ö†Ô∏è" if overall_status == "mixed" else "‚ùå"
                
                print(f"  {status_emoji} {service_name}: {overall_status} ({enabled_mappings}/{total_mappings} enabled)")
                
                if func.get('mappings'):
                    for mapping in func['mappings']:
                        queue_name = mapping['event_source_arn'].split(':')[-1]
                        state = mapping['state']
                        state_emoji = "‚úÖ" if state == "Enabled" else "üîÑ" if state == "Enabling" else "‚ùå"
                        print(f"    {state_emoji} {queue_name}: {state}")
            
            # Check if system is fully operational
            if status_data['summary']['enabled_functions'] == status_data['summary']['total_functions']:
                print(f"\nüéâ SUCCESS: All functions are enabled and operational!")
                print(f"The centralized subscription manager is working perfectly.")
            elif status_data['summary']['mixed_state_functions'] > 0:
                print(f"\n‚ö†Ô∏è  Some functions are still transitioning...")
                print(f"This is normal - AWS Lambda event source mappings take time to update.")
            else:
                print(f"\n‚ùå Some functions are not enabled. Manual investigation may be needed.")
                
        else:
            print(f"‚ùå Status retrieval failed: {result}")
            
    except Exception as e:
        print(f"‚ùå Error getting status: {e}")

def demonstrate_centralized_benefits():
    """Show the benefits of centralized subscription management"""
    
    print(f"\n=== CENTRALIZED SUBSCRIPTION MANAGEMENT BENEFITS ===")
    
    print(f"\nüéØ ACHIEVED OBJECTIVES:")
    print(f"  ‚úÖ Single Lambda manages all subscriptions")
    print(f"  ‚úÖ Removed duplicate logic from business Lambdas") 
    print(f"  ‚úÖ Centralized control via SNS messages")
    print(f"  ‚úÖ Easy to add new Lambda functions")
    print(f"  ‚úÖ Consistent behavior across all services")
    print(f"  ‚úÖ Centralized monitoring and status reporting")
    
    print(f"\nüìà SCALABILITY IMPROVEMENTS:")
    print(f"  ‚Ä¢ Add new Lambda functions by updating configuration")
    print(f"  ‚Ä¢ No code changes needed in business logic Lambdas")
    print(f"  ‚Ä¢ Single point of control for all subscription operations")
    print(f"  ‚Ä¢ Uniform error handling and recovery procedures")
    
    print(f"\nüîß OPERATIONAL BENEFITS:")
    print(f"  ‚Ä¢ Simplified troubleshooting (one place to check)")
    print(f"  ‚Ä¢ Consistent subscription management across services")
    print(f"  ‚Ä¢ Centralized logging and monitoring")
    print(f"  ‚Ä¢ Easier testing and validation")
    
    print(f"\nüöÄ FUTURE ENHANCEMENTS:")
    print(f"  ‚Ä¢ Add more Lambda functions to MANAGED_FUNCTIONS config")
    print(f"  ‚Ä¢ Implement advanced subscription policies")
    print(f"  ‚Ä¢ Add health checks and automatic recovery")
    print(f"  ‚Ä¢ Integrate with monitoring dashboards")

if __name__ == "__main__":
    print("Checking Final Subscription Status")
    print("=" * 50)
    
    check_final_status()
    demonstrate_centralized_benefits()
    
    print("\n" + "=" * 50)
    print("Centralized Subscription Management - COMPLETE! üéâ")